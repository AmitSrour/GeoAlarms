GeoAlarms
=========


1. Introduction
2. Requirements
3. Package overview
4. Program usage  


Introduction
============

The purpose of the project is to implementation of an Android application that
allows its users to store alarms associated with geographical locations. Each
alarm would have a radius within a notification would be triggered. 

The applications uses the geolocating API, as well as Google Maps libraries for
embeding maps in the different activities.


Requirements
============

This section is a review of the original requirements, highlighting what we have
achieved and explaining why we have failed to meet some of them. We also include
some of our thoughts on future directions of the project.

Map view
~~~~~~~~

We planned to make Map View the core of our application, stating that the user
would be able to:
- visualize the alarms;
- obtain information about the alarms tapping on them;
- use touch gestures to manipulate existing alarms and create new ones.

The visualization of the alarms has been implemented, we can see at a glance what
the nearby alarms are and what is their radius by opening the map view:

SCREENSHOT

The creation, edition and deletion of the alarms has not been implemented using
touch gestures. Those operations have been implemented in the alarm list for
convenience.

Alarm view
~~~~~~~~~~

We stated that, apart from visualizing a list with all the alarms, the user would 
be able to create, edit and delete alarms from the alarm view and that requirement 
has been met.

The components of the list only show the name of the alarm, but we have some
improvements in mind, such as:
- sort the alarms by distance to the current position (closest goes first);
- show more information about the alarm than just the name;
- use of slide gestures to operate on the alarms.

TODO


Package overview
================

src/main/java/
└── com
    └── geoalarms
        ├── GeoAlarms.java
        ├── activity
        │   ├── AlarmEditor.java
        │   ├── AlarmList.java
        │   ├── Help.java
        │   ├── Home.java
        │   ├── Map.java
        │   └── Preferences.java
        ├── database
        │   ├── AlarmDatabaseHelper.java
        │   └── AlarmManager.java
        ├── location
        │   ├── LocListener.java
        │   └── ProximityIntentReceiver.java
        ├── map
        │   ├── AlarmOverlay.java
        │   └── PointOverlay.java
        └── model
            ├── Alarm.java
            └── Coordinates.java

7 directories, 15 files


GeoAlarms
---------

For storing the global application data we choose to subclass `Activity` instead
of implementing a Singleton. `GeoAlarms` subclasses `Activity`. This class gets 
instantiated when the application starts, after specifying it in
`AndroidManifest.xml`:

```
    <application android:name="com.geoalarms.GeoAlarms"
                 ...

```

`GeoAlarm` contains several static members, which can be divided in:
- Global application data.
  - A `Context` object representing the application context.
  - An `AlarmManager` object which is the interface to the alarm database.
  - A `LocationListener` subclass used for monitoring the location changes.
- Activity IDs. These integers are used to represent activities in the intents.
- Intent return codes. We use them when firing an intent with `startActivityForResult`.


activity
--------

The `activity` package contains all the program activities. 

Home
~~~~

The `Home` activity is the applications entry point. It shows a dashboard with
icons for navigating to all the other activities in the application.

Map
~~~

The `Map` activity shows a map with the alarms plotted into it. Each alarm is
displayed showing a pin, its name and a circle with the radius in which is 
activated. 

AlarmList
~~~~~~~~~

This activity shows a `ListView` with all the alarms that are stored in the
database. It is possible to open a new activity for creating, editing or
deleting alarms from this activity.

AlarmEditor
~~~~~~~~~~~

The `AlarmEditor` activity is used for creating new alarms and editing or deleting
existing ones. It has text boxes for writing the name and description, a small
`MapView` to select the location for the alarm and a spinner for selecting the
notification radius.

Preferences and Help
~~~~~~~~~~~~~~~~~~~~

This activities are intended to allow customization of the application and show
program usage information respectively.


database
--------

This package is intended to encapsulate the persistence logic of `GeoAlarms`. It
contains only two classes:
- `AlarmDatabaseHelper` extends `SQLiteOpenHelper` and contains the database
  information and the basic operations: insert, update and delete.
- `AlarmManager` is the high-level interface to the database, it exposes 
  CRUD (Create, Read, Delete and Update) operations and takes care of the 
  necessary conversions between relational data and Java objects.

location
--------


map
---

The classes contained here are related to the map plotting. They are no more than
custom overlay items:

- `AlarmOverlay` is the overlay used for painting the alarm. It's the representation
  of `Alarm` objects in a map. This class takes care of drawing a pin in the 
  exact point where the alarm is located, and also draws a circle representing the
  radius of the notification.
- `PointOverlay` is the overlay used for painting a colorful dot in the map.


model
-----

This package contains the data structures used in the application:

- `Alarm` objects store information about an alarm.
- `Coordinates` objects encapsulate the alarm coordinates.


Program usage
=============
